stages:
  - publish
  - deploy

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

publish:
  image: docker:latest
  stage: publish
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""

  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

# deploy:
#   image: ubuntu:latest
#   stage: deploy
#   tags:
#     - deployment

#   before_script:
#     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
#     - eval $(ssh-agent -s)
#     - echo "$ID_RSA" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - ssh-add <(echo "$ID_RSA" | base64 -d)
#     - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

deploy:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - chmod 600 $ID_RSA
    - echo $ID_RSA  
    - cat $ID_RSA
    - ssh $SERVER_USER@$SERVER_IP -i $ID_RSA -o StrictHostKeyChecking=no "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY; docker pull $TAG_COMMIT; docker container rm -f my-app || true; docker run -d -p 3000:80 --name my-app $TAG_COMMIT"
    
  environment:
    name: production
    url: http://172.31.1.70
  only:
    - main
